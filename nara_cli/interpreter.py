import re
import json

memory = {}

def run_nara_code(code: str):
    print("ЁЯФН Interpreting N─АRA code...\n")

    # Parse agent
    agent_match = re.search(r"рдкреБрд░реБрд╖рдГ (.*?) рдЕрд╕реНрддрд┐", code)
    if agent_match:
        agent_name = agent_match.group(1)
        print(f"ЁЯза Agent: {agent_name}")

    # Parse traits
    traits = re.findall(r"рдЧреБрдгрд╛рдГ: \[(.*?)\]", code)
    if traits:
        trait_list = [t.strip('" ') for t in traits[0].split(',')]
        print(f"тЬи Traits: {trait_list}")

    # Simulate memory input
    input_context = "рдЪрд┐рдиреНрддрд╛рдпреБрдХреНрддрдГ"
    memory["рднрд╛рд╡рдирд╛"] = input_context
    print(f"ЁЯза Input context: рднрд╛рд╡рдирд╛ = {input_context}\n")

    # Task logic
    if "рдпрджрд┐ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛.рднрд╛рд╡рдирд╛ == " in code:
        condition_match = re.search(r"рдпрджрд┐ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛.рднрд╛рд╡рдирд╛ == \"(.*?)\"", code)
        if condition_match:
            expected = condition_match.group(1)
            if expected == input_context:
                print("тЬЕ Condition matched: invoking calm protocol")
                memory["рдкреНрд░рдХреНрд░рд┐рдпрд╛"] = "рдЪрдХреНрд░ рд╕рдиреНрддреБрд▓рди"
            else:
                print("ЁЯФБ рдЕрдиреНрдпрдерд╛ path: using AI memory layer")
                memory["рдкреНрд░рдХреНрд░рд┐рдпрд╛"] = "AI рд╕реНрдореГрддрд┐"
        else:
            print("тЪая╕П No valid condition found.")
    else:
        print("ЁЯЯб No conditional block found.")

    # Simulate a рд╕реНрдореГрддрд┐ assignment
    if "рд╕реНрдореГрддрд┐[" in code:
        mem_assignments = re.findall(r'рд╕реНрдореГрддрд┐\[\"(.*?)\"]\s*=\s*\"(.*?)\"', code)
        for key, value in mem_assignments:
            memory[key] = value
            print(f"ЁЯУе рд╕реНрдореГрддрд┐ updated: {key} = {value}")

    # Show memory
    print("\nЁЯУж рд╕реНрдореГрддрд┐:")
    for k, v in memory.items():
        print(f"  {k}: {v}")

    # Export memory trace to JSON
    with open("nara_memory_trace.json", "w", encoding="utf-8") as f:
        json.dump(memory, f, ensure_ascii=False, indent=2)
    print("\nЁЯУД Exported trace: nara_memory_trace.json")

    print("\nтЬЕ N─АRA execution complete.")
